using System;
using System.Collections.Generic;
using System.Net;
using RL_ipv4;

namespace MPAPI
{
    /// <summary>
    /// Creating a proxy class that inherits from ClientBase, instead of using the default proxy generated by
    /// ProxyFactory, makes sense in this case since there are a number of values we can actually cache
    /// on this side of the connection.
    /// </summary>
    public class RemoteNodeProxy : ClientBase<INode>, INode
    {
        private readonly int _processorCount;
        private readonly IPEndPoint _endPoint;
        private readonly ushort _id;

        public RemoteNodeProxy(IPEndPoint endpoint)
            : base(endpoint)
        {
            //cache a few values that are unlikely to change
            _processorCount = Proxy.GetProcessorCount();
            _endPoint = Proxy.GetIpEndPoint();
            _id = Proxy.GetId();
        }


        public void PutMessage(MessageLevel messageLevel, ushort receiverNodeId, ushort receiverWorkerId,
            ushort senderNodeId, ushort senderWorkerId, int messageType, object content)
            => Proxy.PutMessage(messageLevel, receiverNodeId, receiverWorkerId, senderNodeId, senderWorkerId,
                messageType, content);

        public List<ushort> GetWorkerIds() => Proxy.GetWorkerIds();

        public bool Spawn(Type workerType, out ushort workerId) => Proxy.Spawn(workerType, out workerId);

        public bool Spawn(string workerTypeName, out ushort workerId) => Proxy.Spawn(workerTypeName, out workerId);

        public int GetProcessorCount() => _processorCount;

        public int GetWorkerCount() => Proxy.GetWorkerCount();

        public void Monitor(WorkerAddress monitor, WorkerAddress monitoree) => Proxy.Monitor(monitor, monitoree);

        public IPEndPoint GetIpEndPoint() => _endPoint;

        public ushort GetId() => _id;

    }
}